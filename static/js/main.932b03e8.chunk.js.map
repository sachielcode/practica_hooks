{"version":3,"sources":["context/ThemeContext.js","components/Header.jsx","components/Footer.jsx","components/Character.jsx","components/Characters.jsx","Content.jsx","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","React","createContext","Header","themeName","handleClick","console","log","className","id","type","onClick","Footer","Character","character","statusEmoji","status","src","image","alt","name","species","origin","location","Characters","useState","characters","setCharacters","pages","setPages","pagina","setPagina","load","setLoad","useEffect","fetch","then","response","json","data","concat","results","info","fetchCharacters","handler","entries","isIntersecting","footer","document","getElementById","IntersectionObserver","threshold","observe","map","Content","theme","useContext","body","style","backgroundColor","background","color","App","themes","setTheme","darkMode","setDarkMode","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.932b03e8.chunk.js","sourcesContent":["import React from 'react';\n\nconst ThemeContext = React.createContext(null);\n\nexport default ThemeContext;","import React from 'react';\n\nimport '../assets/components/Header.css';\n\nconst Header = ({themeName, handleClick}) => {\n\n  console.log(themeName)\n  return (\n    <div className=\"Header\" id=\"Header\">\n      <h1>ReactHooks</h1>\n      <button className=\"darkMode__button\" type=\"button\" onClick={handleClick}>{ themeName }</button>\n    </div>\n  );\n}\n\nexport default Header;","import React, { useEffect } from 'react';\n\nconst Footer = () => {\n  return (\n    <div className=\"Footer\" id=\"Footer\">\n      <h6>Footer</h6>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\n\nimport '../assets/components/Character.css'\n\nconst Character = ({character}) => {\n  let statusEmoji = 'üëç';\n\n  switch (character.status) {\n    case 'Dead':\n      statusEmoji = '‚ò†'\n      \n      break;\n    case 'unknown':\n      statusEmoji = 'ü§∑‚Äç‚ôÄÔ∏èü§∑‚Äç‚ôÇÔ∏è'\n      \n      break;\n  \n    default: \n      statusEmoji = 'üëç'\n      break;\n  }\n\n  return (\n    <div className=\"Character\">\n      <div className=\"card\">\n        <div className=\"card__info\">\n          <img className=\"card__img\" src={character.image} alt=\"\" />\n          <h2>{character.name}</h2>\n          <div className=\"Character__info\">\n            <span><strong>Status: </strong>{character.status} {statusEmoji}</span>\n            <span><strong>Species: </strong>{character.species}</span>\n            <span><strong>Origin: </strong>{character.origin.name}</span>\n            <span><strong>Location: </strong>{character.location.name}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Character;","import React, { useState, useEffect } from 'react';\n\nimport Character from './Character'\nimport '../assets/components/Characters.css'\n\nconst Characters = () => {\n  const [characters, setCharacters] = useState([]);\n  const [pages, setPages] = useState(0);\n  const [pagina, setPagina] = useState(0);\n  const [load, setLoad] = useState(false);\n\n  const fetchCharacters = (pagina) => {\n    fetch('https://rickandmortyapi.com/api/character/?page=' + pagina)\n    .then(response => response.json())\n    .then(data => {\n      setCharacters(characters.concat(data.results));\n      setPages(data.info.pages)\n    });\n  }\n\n  useEffect(() => {\n    console.log({pages})\n    if(pagina <= pages){\n      fetchCharacters(pagina);\n    }\n  },[load, pagina]);\n  \n  \n  const handler = (entries) => {\n    const entry = entries[0];\n    const isVisible = entry.isIntersecting;\n    if(isVisible){\n      setLoad(!load);\n      setPagina(pagina => pagina + 1);\n    }\n  };\n\n  useEffect(() => {\n    const footer = document.getElementById('Footer');\n    \n    const observer = new IntersectionObserver(handler , {\n      threshold: 0.95\n    });\n    \n    observer.observe(footer);\n  }, []);\n\n\n\n\n  return (\n    <div className=\"Characters\">\n      {characters.map(character => (\n        <Character key={character.id} character={character}/>        \n      ))}\n    </div>\n  );\n}\n\nexport default Characters;","import React, { useContext } from 'react';\nimport ThemeContext from './context/ThemeContext';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Characters from './components/Characters';\n\nimport './assets/Content.css';\n\nconst Content = ({handleClick}) => {\n  const theme = useContext(ThemeContext);\n\n  document.body.style.backgroundColor = theme.background;\n  document.body.style.color = theme.color;\n\n  return ( \n    <div className=\"Content\">\n      <Header themeName={theme.name} handleClick={handleClick}/>\n      <Characters />\n      <Footer />\n    </div>\n   );\n}\n \nexport default Content;","import React, { useEffect, useState } from 'react';\nimport ThemeContext from './context/ThemeContext';\nimport Content from './Content';\nimport './assets/App.css';\n\nfunction App() {\n  const themes = {\n    light: {\n      name: \"Ligth Mode\",\n      background: \"#eeeeee\",\n      color: \"black\"\n    },\n    dark: {\n      name: \"Dark Mode\",\n      background: \"#121f3d\",\n      color: \"white\"\n    }\n  };\n  \n  const [theme, setTheme] = useState(themes.light);\n  const [darkMode, setDarkMode] = useState(false);\n  const handleClick = () => {\n    setDarkMode(!darkMode);\n  }\n  \n  useEffect(()=>{\n    if(darkMode){\n      setTheme(themes.dark);\n    }else{\n      setTheme(themes.light);\n    }\n  },[darkMode]);\n  \n  return (\n    <ThemeContext.Provider value={theme}>\n      <Content className=\"App\" handleClick={handleClick} />\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}